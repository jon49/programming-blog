[{"title":"Subscribe to RSS Feed","subtitle":"via E-mail (MailChimp)","description":"Sign up form for RSS feed via MailChimp","type":"page","url":"/signup/","contents":"<p><link href=\"//cdn-images.mailchimp.com/embedcode/classic-081711.css\" rel=\"stylesheet\" type=\"text/css\"></p><style type=\"text/css\">#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }</style>\n<div id=\"mc_embed_signup\"><form action=\"//spreadsheetbudget.us9.list-manage.com/subscribe/post?u=a2aace3b491dfc182af044ad3&amp;id=e8748aa205\" method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\" class=\"validate\" target=\"_blank\" novalidate>\n\n<h2>Subscribe to RSS Feed via E-mail</h2><div class=\"indicates-required\"><span class=\"asterisk\">*</span> indicates required</div><div class=\"mc-field-group\"><p><label for=\"mce-EMAIL\">Email Address <span class=\"asterisk\">*</span></label></p><input type=\"email\" value=\"\" name=\"EMAIL\" class=\"required email\" id=\"mce-EMAIL\"></div><p>Powered by <a href=\"http://eepurl.com/27MwX\" title=\"MailChimp - email marketing made easy and fun\">MailChimp</a></p>\n<div id=\"mce-responses\" class=\"clear\"><div id=\"mce-error-response\" class=\"response\" style=\"display:none\"></div><div id=\"mce-success-response\" class=\"response\" style=\"display:none\"></div></div><div style=\"position: absolute; left: -5000px;\"><input type=\"text\" name=\"b_a2aace3b491dfc182af044ad3_e8748aa205\" tabindex=\"-1\" value=\"\"></div><div class=\"clear\"><input type=\"submit\" value=\"Subscribe\" name=\"subscribe\" id=\"mc-embedded-subscribe\" class=\"button\"></div></form></div>\n"},{"description":"Description of programming blog.","type":"page","url":"/about/","contents":"<p>I’m a self-taught programmer looking for some work in Arizona or any telecommuting job would be fine too!</p><p>I started with VBA programming in Excel and then moved over to the .NET world, ending with F# (great language). But then I started learning JavaScript and am now a “front-end developer” looking for work. I prefer functional-style programming with libraries like <code>bilby.js</code> and <code>lodash.js</code>.</p><p>This blog was written from scratch with <code>mithril.js</code>, <code>gulp.js</code>, and <code>pandoc</code>.</p><p>I live in sunny Arizona and have three wonderful children and a loving wife.</p>\n"},{"title":"bilby.js & lenses","tags":["bilby.js","immutability","javascript","functional programming"],"date":"July 1, 2014","url":"/2014/07/01/bilbyjs_lenses/","contents":"<h1 id=\"bilby.js-lenses\">bilby.js &amp; lenses</h1><p>In JavaScript nearly everything is <a href=\"http://en.wikipedia.org/wiki/Mutable\">mutable</a>. This can cause problems in your code when you think you have a new object or variable but instead you are operating on the referenced object. So, we create patterns to alleviate this problem. Or we use libraries like <a href=\"http://underscorejs.org/\">underscore.js</a> or <a href=\"http://lodash.com/docs\">lodash.js</a> which incorporate the functional concepts. Unfortunately they don’t always use immutable objects either.</p><p>Bilby.js solves the mutability problem by using <a href=\"http://bilby.brianmckenna.org/#lenses\">lenses</a>. Using the <a href=\"http://en.wikipedia.org/wiki/Bidirectional_transformation\">lenses</a> pattern one can access and change one’s objects in a safe and immutable manner.</p><p>Let’s say we have the <code>Person</code> object.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">function</span> <span class=\"fu\">Person</span>(){\n   <span class=\"kw\">this</span>.<span class=\"fu\">name</span> = {<span class=\"dt\">first</span>: <span class=\"st\">&#39;George&#39;</span>, <span class=\"dt\">last</span>: <span class=\"st\">&#39;Stanza&#39;</span>}\n   <span class=\"kw\">this</span>.<span class=\"fu\">id</span> = <span class=\"dv\">0</span>\n}</code></pre><p>We use bilby.js lenses by first creating lens objects.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> nameLens = <span class=\"ot\">bilby</span>.<span class=\"fu\">objectLens</span>(<span class=\"st\">&#39;name&#39;</span>)\n<span class=\"kw\">var</span> firstLens = <span class=\"ot\">bilby</span>.<span class=\"fu\">objectLens</span>(<span class=\"st\">&#39;first&#39;</span>)\n<span class=\"kw\">var</span> lastLens = <span class=\"ot\">bilby</span>.<span class=\"fu\">objectLens</span>(<span class=\"st\">&#39;last&#39;</span>)\n<span class=\"kw\">var</span> idLens = <span class=\"ot\">bilby</span>.<span class=\"fu\">objectLens</span>(<span class=\"st\">&#39;id&#39;</span>)</code></pre><p>We then can use getters to access the data.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> george = <span class=\"kw\">new</span> <span class=\"fu\">Person</span>()\n<span class=\"co\">// Person {name: {first:&#39;George&#39;, last: &#39;Stanza&#39;}, id: 0}</span>\n<span class=\"ot\">firstLens</span>.<span class=\"fu\">compose</span>(nameLens).<span class=\"fu\">run</span>(george).<span class=\"fu\">getter</span>\n<span class=\"co\">//George</span>\n<span class=\"ot\">lastLens</span>.<span class=\"fu\">compose</span>(nameLens).<span class=\"fu\">run</span>(george).<span class=\"fu\">getter</span>\n<span class=\"co\">//Stanza</span>\n<span class=\"ot\">idLens</span>.<span class=\"fu\">run</span>(george).<span class=\"fu\">getter</span>\n<span class=\"co\">//0</span></code></pre><p>Or you can create a get function.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> get = <span class=\"kw\">function</span>(lens, obj){\n   <span class=\"kw\">return</span> <span class=\"ot\">lens</span>.<span class=\"fu\">run</span>(obj).<span class=\"fu\">getter</span>\n}\n<span class=\"co\">// e.g.,</span>\n<span class=\"fu\">get</span>(<span class=\"ot\">firstLens</span>.<span class=\"fu\">compose</span>(nameLens), george)\n<span class=\"co\">// George</span></code></pre><p>To create a new object with new values from another object.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> susan = <span class=\"ot\">firstLens</span>.<span class=\"fu\">compose</span>(nameLens).<span class=\"fu\">run</span>(george).<span class=\"fu\">setter</span>(<span class=\"st\">&#39;Susan&#39;</span>)\n<span class=\"co\">// Object {name: {first:&#39;Susan&#39;, last: &#39;Stanza&#39;}, id: 0}</span></code></pre><p><strong>Update</strong></p><p>The below code is strongly discouraged by <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\">Mozilla Developer Network</a>. Also, the correct method would be <code>Object.getPrototypeOf(object)</code> and <code>Object.setPrototypeOf(object)</code> instead of <code>__proto__</code>. I’ve since switched to using plain objects with commonjs modules instead.</p><p><strong>End Update</strong></p><p>Hhhhmmm…there’s a problem there. <code>susan</code> is no longer a <code>Person</code> she’s only an <code>Object</code>. We don’t want to objectify her do we? I worked around this problem by creating my own <code>set</code> function.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> set = <span class=\"kw\">function</span>(lens, object, value){\n   <span class=\"kw\">var</span> newObject = <span class=\"ot\">lens</span>.<span class=\"fu\">run</span>(object).<span class=\"fu\">setter</span>(value)\n   <span class=\"kw\">return</span> <span class=\"ot\">_</span>.<span class=\"fu\">isEqual</span>(<span class=\"ot\">newObject</span>.<span class=\"fu\">__proto__</span>, <span class=\"ot\">object</span>.<span class=\"fu\">__proto__</span>) \n      ? newObject \n      : (<span class=\"ot\">newObject</span>.<span class=\"fu\">__proto__</span> = <span class=\"ot\">object</span>.<span class=\"fu\">__proto__</span>, newObject)\n}\n<span class=\"co\">//e.g.,</span>\n<span class=\"kw\">var</span> fred = <span class=\"fu\">set</span>(<span class=\"ot\">firstLens</span>.<span class=\"fu\">compose</span>(nameLens), george, <span class=\"st\">&#39;Fred&#39;</span>)\n<span class=\"co\">// Person {name: {first:&#39;Fred&#39;, last: &#39;Stanza&#39;}, id: 0}</span></code></pre><p>Now we need to remember that these new objects are not deep clones, only shallow clones, which helps with performance but, if we leave our design pattern we could get in trouble, so be careful!</p><p>Note that in <a href=\"https://github.com/fantasyland/fantasy-lenses\">Fantasy Land lenses</a> the naming convetion is different <code>setter</code> and <code>getter</code> drop the <code>ter</code> and <code>compose</code> is dropped in favor of <code>andThen</code> making it so you can switch the order of your lenses.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> deborah = <span class=\"ot\">nameLens</span>.<span class=\"fu\">andThen</span>(firstLens).<span class=\"fu\">run</span>(george).<span class=\"fu\">set</span>(<span class=\"st\">&#39;Deborah&#39;</span>)\n<span class=\"co\">// Object {name: {first: &#39;Deborah&#39;, last: &#39;Stanza&#39;}, id: 0}</span></code></pre><p>If you want to play around with these concepts in jsFiddle you can use lodash.js’ <code>_.assign</code> method. I’ve set up the <a href=\"http://jsfiddle.net/jon49/3xRNT/\">jsFiddle here.</a></p>\n"},{"title":"Match Expression for JavaScript?","tags":["functional programming","match expressions","ternary","design patterns"],"date":"June 20, 2014","url":"/2014/06/20/match_expression_javascript/","contents":"<h1 id=\"match-expression-for-javascript\">Match Expression for JavaScript?</h1><p>Sometimes (or rather most of the time) it would be nice to have more concise code in JavaScript. I was working with a function that needed quite a bit of <code>if</code> statements. <code>if</code> was awfully cluttered. I had looked at <a href=\"http://bilby.brianmckenna.org/examples/validation.htm\">bilby.js examples</a> and hadn’t realized that you can do multiple <code>ternary expressions</code> in a row.</p><p>So, instead of,</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">if</span> (<span class=\"dv\">0</span>){\n  <span class=\"kw\">return</span> <span class=\"dv\">0</span>\n}\n<span class=\"kw\">else</span> <span class=\"kw\">if</span> (<span class=\"dv\">1</span>){\n   <span class=\"kw\">if</span> (<span class=\"dv\">2</span>) {\n     <span class=\"kw\">return</span> <span class=\"dv\">1</span>\n   }\n   <span class=\"kw\">else</span> <span class=\"kw\">if</span> (<span class=\"dv\">3</span>) {\n     <span class=\"kw\">return</span> <span class=\"dv\">2</span>\n   }\n   <span class=\"kw\">else</span> {\n     <span class=\"kw\">return</span> <span class=\"dv\">3</span>\n   }\n}\n<span class=\"kw\">else</span> {\n  <span class=\"kw\">return</span> <span class=\"dv\">4</span>\n}</code></pre><p>You can do,</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\">(<span class=\"dv\">0</span>) ? <span class=\"dv\">0</span>\n: (<span class=\"dv\">1</span>) ?\n     (<span class=\"dv\">2</span>) ? <span class=\"dv\">1</span>\n   : (<span class=\"dv\">3</span>) ? <span class=\"dv\">2</span>\n   : <span class=\"dv\">3</span>\n: <span class=\"dv\">4</span></code></pre><p>Which is much more concise and readable.</p><p>So where does <code>match expressions</code> come into play? Glad you asked.</p><p>The <code>ternary</code> example above gives a similar <a href=\"http://fsharpforfunandprofit.com/posts/match-expression/\">feel to <code>F#</code>’s <code>match expressions</code></a>. So, as an example here’s what a similary structured <code>match expression</code> would look like.</p><pre class=\"sourceCode fsharp\"><code class=\"sourceCode fsharp\"><span class=\"kw\">match</span> [something] <span class=\"kw\">with</span> \n| pattern0 -&gt; <span class=\"dv\">0</span>\n| pattern1 -&gt; \n   <span class=\"kw\">match</span> [something <span class=\"kw\">else</span>] <span class=\"kw\">with</span>\n   | pattern2 -&gt; <span class=\"dv\">1</span>\n   | pattern3 -&gt; <span class=\"dv\">2</span>\n   | _ -&gt; <span class=\"dv\">3</span>\n| _ -&gt; <span class=\"dv\">4</span></code></pre><p>Of course, with <code>F#</code> you could probably get away without doing the second <code>match</code> by using a <code>Tuple</code> but that is beyond the scope of this post.</p><p>So, let’s look at the real function I made. First, let’s set up the bare parts of the function.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> addRollingArray = <span class=\"kw\">function</span> (array, start, end, fraction) {\n  <span class=\"kw\">var</span> floor = <span class=\"ot\">Math</span>.<span class=\"fu\">floor</span>\n  <span class=\"co\">// Put code below here.</span>\n}</code></pre><p>Then we’ll map the array with some helper logic values.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\">  <span class=\"kw\">return</span> <span class=\"ot\">_</span>.<span class=\"fu\">map</span>(array, <span class=\"kw\">function</span> (value, index) {\n    <span class=\"kw\">var</span> isIndexStart = (<span class=\"fu\">floor</span>(start) === index),\n        isIndexBetween = (<span class=\"fu\">floor</span>(start) &lt;= index &amp;&amp; index &lt;= <span class=\"fu\">floor</span>(end)),\n        isIndexEnd = (<span class=\"fu\">floor</span>(end) === index)\n    <span class=\"co\">// Code below goes here.</span>\n  })</code></pre><p>Here’s the <code>if</code> code,</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">if</span> (isIndexBetween) {\n  <span class=\"kw\">if</span> (isIndexStart &amp;&amp; isIndexEnd)\n    <span class=\"kw\">return</span> fraction * (end - start) + value\n  <span class=\"kw\">else</span> <span class=\"kw\">if</span> (isIndexStart)\n    <span class=\"kw\">return</span> fraction * (<span class=\"dv\">1</span> + index - start) + value\n  <span class=\"kw\">else</span> <span class=\"kw\">if</span> (isIndexEnd)\n    <span class=\"kw\">return</span> fraction * (end - index) + value\n  <span class=\"kw\">else</span>\n    <span class=\"co\">// Index is fully between start and end values</span>\n    <span class=\"kw\">return</span> fraction + value\n}\n<span class=\"co\">// Index is out of bounds return original value</span>\n<span class=\"kw\">return</span> value</code></pre><p>And here’s the refactored code,</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">return</span>   \n  isIndexBetween ? \n      isIndexStart &amp;&amp; isIndexEnd ? fraction * (end - start) + value\n    : isIndexStart ? fraction * (<span class=\"dv\">1</span> + index - start) + value\n    : isIndexEnd   ? fraction * (end - index) + value\n    <span class=\"co\">// Index is fully between start and end values</span>\n    : fraction + value\n  <span class=\"co\">// Index is out of bounds return original value</span>\n  : value</code></pre>\n"},{"title":"A Distributed & Robust Feedly","tags":["feedly","ideas"],"date":"June 12, 2014","url":"/2014/06/12/distributed_robust_feedly/","contents":"<h1 id=\"a-distributed-robust-feedly\">A Distributed &amp; Robust Feedly</h1><p>In light of the recent attack on <a href=\"http://feedly.com/\">Feedly.com</a> I thought it might be interesting to see other ways we could propogate data accross the Interent without being succeptible to attacks, or, at least less accessible.</p><p>With the approach outlined below we need to use an actual app instead of being able to use a browser (there might be a way to use a browser also, not sure how it would work though).</p><p>I used BitTorrent Sync as the distribution model. The more people that follow a blog the more robust its feed will become.</p><p>On the back end all feedly would need to do is periodically update the feeds and user data - but the user data will only need to be updated if a user changes their password. If they have a read-write key for their data then it can be updated only locally and then propogated. The more devices a user uses the more robust their data will become.</p><p>It will be nice when the internet will catch up with the distributed model of doing things.</p><p><a href=\"/images/FeedlyApp.png\"><img src=\"/images/small/FeedlyApp.png\" alt=\"A Simple Outline of How to Set Up a Distributed Feedly\" /></a></p><p>A Simple Outline of How to Set Up a Distributed Feedly</p>\n"},{"title":"Prototypes & Compositions with Objects","tags":["functional programming","design patterns","lenses"],"date":"June 6, 2014","url":"/2014/06/04/prototypes_composition_with_objects/","contents":"<h1 id=\"prototypes-compositions-with-objects\">Prototypes &amp; Compositions with Objects</h1><p>I was trying to figure out the best way to have functions be both compatible with an object oriented paradigm and a functional oriented paradigm when working on objects. My implementations are probably naive, but instructive nevertheless. It seems that <a href=\"http://lodash.com/\">lo-dash</a> and other libraries have done a good job bridging those worlds.</p><p>Let’s say you have an object <code>O</code> such that</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">function</span> <span class=\"fu\">O</span>(a, b){\n  <span class=\"kw\">this</span>.<span class=\"fu\">a</span> = a\n  <span class=\"kw\">this</span>.<span class=\"fu\">b</span> = b\n}\n\n<span class=\"kw\">var</span> o = <span class=\"kw\">function</span>(a, b){\n  <span class=\"kw\">return</span> <span class=\"kw\">new</span> <span class=\"fu\">O</span>(a, b)\n}</code></pre><p>Now, you want to <code>extend</code> the object but you also want the option to use the object in a more fuctional way with <code>compose</code>.</p><p>Let’s start with a simple <code>display</code> method.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> display = <span class=\"kw\">function</span>(thisArg){\n  <span class=\"kw\">var</span> o_ = thisArg || <span class=\"kw\">this</span>\n  <span class=\"ot\">console</span>.<span class=\"fu\">log</span>(o_)\n  <span class=\"kw\">return</span> o_\n}</code></pre><p>Then a method to change a property.*</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> change = <span class=\"kw\">function</span>(property){\n  <span class=\"kw\">return</span> <span class=\"kw\">function</span>(value, thisArg){\n    <span class=\"kw\">var</span> o_ = <span class=\"ot\">_</span>.<span class=\"fu\">cloneDeep</span>(thisArg || <span class=\"kw\">this</span>)\n    o_[property] = value\n    <span class=\"kw\">return</span> o_\n  }\n}</code></pre><p>Now we can set property to:</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> changeA = <span class=\"fu\">change</span>(<span class=\"st\">&#39;a&#39;</span>)</code></pre><p>Then we can add <code>changeA</code> to the <code>O</code> object and use it.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"ot\">O</span>.<span class=\"ot\">prototype</span>.<span class=\"fu\">changeA</span> = changeA\n<span class=\"kw\">var</span> o_ = <span class=\"fu\">o</span>(<span class=\"dv\">1</span>, <span class=\"dv\">2</span>)\n<span class=\"ot\">o_</span>.<span class=\"fu\">changeA</span>(<span class=\"dv\">3</span>).<span class=\"fu\">display</span>()</code></pre><p>Or we can use a functional approach.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> o_ = <span class=\"fu\">o</span>(<span class=\"dv\">1</span>, <span class=\"dv\">2</span>)\n<span class=\"ot\">_</span>.<span class=\"fu\">compose</span>(display, <span class=\"ot\">_</span>.<span class=\"fu\">curry</span>(changeA)(<span class=\"dv\">3</span>))(o_)\n<span class=\"co\">//OR</span>\n<span class=\"ot\">_</span>.<span class=\"fu\">compose</span>(display, <span class=\"ot\">_</span>.<span class=\"fu\">partialRight</span>(changeA, o_))(<span class=\"dv\">3</span>)\n<span class=\"co\">//OR</span>\n<span class=\"ot\">_</span>.<span class=\"fu\">compose</span>(display, changeA)(<span class=\"dv\">3</span>, o_)</code></pre><p>I think I like the functional approach for the more abstract functions and the OO approach as your code becomes more specific. The functional evangelists say the functional style is better because it leads to more reusable code. Which I would agree with, since you are not tying your code up with an object you can then easily extend your model to various other objects, without the use of <code>inheritance</code> and other OO monsters. I think I will use a hybrid approach with <code>bilby.js</code> library which uses polymorphism.</p><p>By the way, what I just did with <code>change</code> is similar to <a href=\"https://github.com/fantasyland/fantasy-lenses\"><code>lenses</code></a>.</p><p>* An alternative to this would be using a partial function, which would make the original function more flexible.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> change = <span class=\"kw\">function</span>(property, value, thisArg){\n    <span class=\"kw\">var</span> o_ = <span class=\"ot\">_</span>.<span class=\"fu\">cloneDeep</span>(thisArg || <span class=\"kw\">this</span>)\n    o_[property] = value\n    <span class=\"kw\">return</span> o_\n  }\n}</code></pre><p>Now we can set property to:</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> changeA = <span class=\"ot\">_</span>.<span class=\"fu\">partial</span>(change, <span class=\"st\">&#39;a&#39;</span>)</code></pre><p>Or using combinators (not strict).</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> set = <span class=\"kw\">function</span>(property, value){\n  <span class=\"kw\">this</span>[property] = value\n  <span class=\"kw\">return</span> <span class=\"kw\">this</span>\n}\n\n<span class=\"kw\">var</span> change = <span class=\"kw\">function</span>(f, value, thisArg){\n    <span class=\"kw\">var</span> o_ = <span class=\"ot\">_</span>.<span class=\"fu\">cloneDeep</span>(thisArg || <span class=\"kw\">this</span>)\n    o_ = <span class=\"ot\">f</span>.<span class=\"fu\">apply</span>(o_, [value])\n    <span class=\"kw\">return</span> o_\n  }\n}</code></pre><p>Now we can set property to:</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> changeA = <span class=\"ot\">_</span>.<span class=\"fu\">partial</span>(change\n              , <span class=\"ot\">_</span>.<span class=\"fu\">partial</span>(set, <span class=\"st\">&#39;a&#39;</span>))</code></pre>\n"},{"title":"Functional or Object Oriented JavaScript?","tags":["functional programming","michael fogus","fun"],"date":"May 29, 2014","url":"/2014/05/29/functional_or_oo_javascript/","contents":"<h1 id=\"functional-or-object-oriented-javascript\">Functional or Object Oriented JavaScript?</h1><blockquote><p>When people are first exposed to JavaScript and its minimal set of tools (functions, objects, prototypes, and arrays), many are underwhelmed. Therefore, in order to “modify” JavaScript to conform to their idea of what it takes to model software solutions, they very often seek out or re-create class-based systems using the primordial ooze.</p></blockquote><blockquote><p>- Michael Fogus <em>Functional Programming</em></p></blockquote><p>Of course, the next sentence he softens that quote, I just enjoyed the first part though.</p><blockquote><p>This desire is completely understandable given that in general people will often seek the familiar.</p></blockquote><p>And the big problem is…</p><blockquote><p>The big problem with class hierarchies is that they are created under the assumption that we know the set of needed behaviors from the start. That is, object-oriented techniques prescribe that we start with a hierarchy of behaviors and fit our classes into that determination.</p></blockquote><blockquote><p>- Michael Fogus <em>Functional Programming</em></p></blockquote>\n"},{"title":"Functional Immutability in JavaScript","tags":["functional programming","immutability"],"date":"May 29, 2014","url":"/2014/05/29/functional_immutability_in_javascript/","contents":"<h1 id=\"functional-immutability-in-javascript\">Functional Immutability in JavaScript</h1><p>This is taken from Michael Fogus’ book <em>Functional JavaScript</em> in the chapter <em>Purity, Immutability, and Policies for Change</em>.</p><p>Immutability is impossible to achieve in JavaScript without using <code>Object.freeze</code> but it only performs makes the object immutable shallowing, you have to roll your own <code>deepFreeze</code> if you would like to make the object truly immutable.</p><p>So there are some practices you can do to make your functions and variables perform in a more immutable manner.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> SaferQueue = <span class=\"kw\">function</span>(elems) {\n  <span class=\"kw\">this</span>.<span class=\"fu\">_q</span> = <span class=\"ot\">_</span>.<span class=\"fu\">clone</span>(elems);\n}</code></pre><p>If you need to you can use a <code>deepClone</code> instead.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"ot\">SaferQueue</span>.<span class=\"fu\">prototype</span> = {\n  <span class=\"dt\">enqueue</span>: <span class=\"kw\">function</span>(thing) {\n    <span class=\"kw\">return</span> <span class=\"kw\">new</span> <span class=\"fu\">SaferQueue</span>(<span class=\"fu\">cat</span>(<span class=\"kw\">this</span>.<span class=\"fu\">_q</span>, [thing]));\n  }\n};</code></pre><p>Where <code>cat</code> concatenates two arrays without changing the values of the original arrays.</p><p>And don’t forget to encapsulate the <code>object</code> instatiation behind a function.</p>\n"},{"title":"Notes on Monads, Monoids, and Make Believe","subtitle":"with Brian Lonsdorf","tags":["functional programming","functor","design patterns"],"date":"May 15, 2014","url":"/2014/05/15/monads_monoids_and_make_believe_brian_lonsdorf/","contents":"<h1 id=\"notes-on-monads-monoids-and-make-believe\">Notes on Monads, Monoids, and Make Believe</h1><h2 id=\"with-brian-lonsdorf\">with Brian Lonsdorf</h2><h3 id=\"working-with-objects\">Working with Objects</h3><h4 id=\"the-better-way\">the better way</h4><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> SSN = <span class=\"fu\">Constructor</span>(<span class=\"kw\">function</span>(number, current_user){\n    <span class=\"kw\">this</span>.<span class=\"fu\">number</span> = number\n    <span class=\"kw\">this</span>.<span class=\"fu\">user</span> = current_user\n})\n\n<span class=\"ot\">SSN</span>.<span class=\"fu\">prototype</span> = {\n    <span class=\"dt\">fmap</span>: <span class=\"kw\">function</span>(f){\n        <span class=\"kw\">if</span>(<span class=\"kw\">this</span>.<span class=\"ot\">user</span>.<span class=\"fu\">is_admin</span>)\n            <span class=\"kw\">return</span> <span class=\"fu\">SSN</span>(<span class=\"fu\">f</span>(<span class=\"kw\">this</span>.<span class=\"fu\">number</span>), <span class=\"kw\">this</span>.<span class=\"fu\">user</span>)\n    }\n}\n\n<span class=\"ot\">social</span>.<span class=\"fu\">fmap</span>(<span class=\"fu\">replace</span>(<span class=\"st\">&#39;-&#39;</span>, <span class=\"st\">&#39;&#39;</span>))\n<span class=\"co\">//=&gt; SSN(&#39;123456789&#39;, user)</span>\n\n<span class=\"ot\">social</span>.<span class=\"fu\">fmap</span>(<span class=\"kw\">function</span>(number){<span class=\"kw\">return</span> <span class=\"ot\">number</span>.<span class=\"fu\">reverse</span>()})\n<span class=\"co\">//=&gt; SSN(&#39;1234-56-789&#39;, user)</span></code></pre><h4 id=\"the-functor-way\">the functor way</h4><p>Note: <a href=\"https://github.com/DrBoolean/Functor/blob/master/functor.js\">Functor function defined.</a></p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> AdminAccess = <span class=\"fu\">Constructor</span>(<span class=\"kw\">function</span>(val, current_user){\n    <span class=\"kw\">this</span>.<span class=\"fu\">val</span> = val\n    <span class=\"kw\">this</span>.<span class=\"fu\">user</span> = current_user\n})\n\n<span class=\"fu\">Functor</span>(AdminAccess, {\n    <span class=\"dt\">fmap</span>: <span class=\"kw\">function</span>(f){\n        <span class=\"kw\">if</span>(<span class=\"kw\">this</span>.<span class=\"ot\">user</span>.<span class=\"fu\">is_admin</span>)\n            <span class=\"kw\">return</span> <span class=\"fu\">AdminAccess</span>(<span class=\"fu\">f</span>(<span class=\"kw\">this</span>.<span class=\"fu\">val</span>), <span class=\"kw\">this</span>.<span class=\"fu\">user</span>)\n    }\n})\n\n<span class=\"kw\">var</span> social = <span class=\"fu\">AdminAccess</span>(<span class=\"st\">&#39;1234-56-789&#39;</span>, current_user)\n<span class=\"fu\">fmap</span>(removeDashes, social)\n<span class=\"co\">//=&gt; AdminAccess(&#39;123456789&#39;, current_user)</span>\n<span class=\"fu\">fmap</span>(validNumber, social)\n<span class=\"co\">//=&gt; AdminAccess(true, current_user)</span></code></pre><p>He then goes into other useful patterns with monads. But I’ll revisit that later after I get a better handle on this!</p><iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/ww2Z1URx-G0\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n"},{"title":"Notes On Functional Programming","subtitle":"Patterns for the Non-Mathematician with Brian Lonsdorf","tags":["functional programming","maybe","either","functor","lenses"],"date":"May 13, 2014","url":"/2014/05/13/functional_programming_for_non_mathematicians/","contents":"<h1 id=\"notes-on-functional-programming\">Notes On Functional Programming</h1><h2 id=\"patterns-for-the-non-mathematician-with-brian-lonsdorf\">Patterns for the Non-Mathematician with Brian Lonsdorf</h2><h3 id=\"lenses\">Lenses</h3><p>Using lenses for composable/polymorphic model manipulation.</p><p>E.g.,</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> user = {<span class=\"dt\">id</span>:<span class=\"dv\">1</span>, <span class=\"dt\">name</span>:{<span class=\"dt\">first</span>:<span class=\"st\">&#39;doris&#39;</span>, <span class=\"dt\">last</span>:<span class=\"st\">&#39;day&#39;</span>}}\n<span class=\"kw\">var</span> L = <span class=\"fu\">makeLenses</span>([<span class=\"st\">&#39;name&#39;</span>, <span class=\"st\">&#39;first&#39;</span>])\n<span class=\"kw\">var</span> firstNameChar = <span class=\"fu\">compose</span>(<span class=\"ot\">L</span>.<span class=\"fu\">name</span>, <span class=\"ot\">L</span>.<span class=\"fu\">first</span>, _1)\n<span class=\"fu\">over</span>(firstNameChar, toUpperCase, user)\n<span class=\"co\">//=&gt; {id:1, name:{first:&#39;Doris&#39;, last:&#39;day&#39;}}</span></code></pre><h3 id=\"maybe\">Maybe</h3><p>Use <code>Maybe</code> (Haskell) types (<code>Option</code> types in bilby.js / Scala style) to make composition easier. This works with <code>fmap</code> (functor maps). Returns resultant <code>option</code>.</p><h3 id=\"error-handling-either\">Error Handling (Either)</h3><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"fu\">Either</span>(<span class=\"st\">&#39;need an int&#39;</span>, <span class=\"dv\">3</span>)\n<span class=\"co\">//=&gt; Right(3)</span>\n\n<span class=\"fu\">Either</span>(<span class=\"st\">&#39;need an int&#39;</span>, <span class=\"kw\">undefined</span>)\n<span class=\"co\">//=&gt; Left(&#39;need an int&#39;)</span>\n\n<span class=\"fu\">fmap</span>(<span class=\"kw\">function</span>(x){<span class=\"kw\">return</span> x<span class=\"dv\">+1</span>;}, <span class=\"fu\">Right</span>(<span class=\"dv\">2</span>))\n<span class=\"co\">//=&gt; Right(3)</span>\n\n<span class=\"fu\">fmap</span>(<span class=\"kw\">function</span>(x){<span class=\"kw\">return</span> x<span class=\"dv\">+1</span>;}, <span class=\"fu\">Left</span>(<span class=\"st\">&#39;need an int&#39;</span>))\n<span class=\"co\">//=&gt; Left(&#39;need an int&#39;)</span>\n\n<span class=\"fu\">compose</span>(<span class=\"fu\">fmap</span>(f), <span class=\"fu\">Either</span>(error))</code></pre><h3 id=\"future-values\">Future Values</h3><p>I’ll have to come back to this one later when I use it more.</p><h3 id=\"functor\">Functor</h3><blockquote><p>Something that implements <strong>map</strong></p></blockquote><p>Like Promise, Maybe, Either, etc.</p><h3 id=\"nesting\">Nesting</h3><p>Use mjoin (flatMap – bilby.js) to flatten nesting.</p><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> getField = <span class=\"fu\">compose</span>(Maybe, <span class=\"ot\">document</span>.<span class=\"fu\">querySelector</span>)\n<span class=\"kw\">var</span> getValue = <span class=\"fu\">compose</span>(Maybe, <span class=\"fu\">pluck</span>(<span class=\"st\">&#39;value&#39;</span>))\n\n<span class=\"kw\">var</span> greet = <span class=\"fu\">compose</span>(<span class=\"fu\">fmap</span>(<span class=\"fu\">fmap</span>(<span class=\"fu\">concat</span>(<span class=\"st\">&#39;hello&#39;</span>)))\n                    , <span class=\"fu\">fmap</span>(getValue), getField)\n<span class=\"fu\">greet</span>(<span class=\"st\">&#39;#name&#39;</span>)\n<span class=\"co\">//=&gt; Maybe(Maybe(&#39;hello chris&#39;))</span>\n\n<span class=\"kw\">var</span> greet = <span class=\"fu\">compose</span>(<span class=\"fu\">fmap</span>(<span class=\"fu\">concat</span>(<span class=\"st\">&#39;hello&#39;</span>))\n                    , mjoin\n                    , <span class=\"fu\">fmap</span>(getValue), getField)\n<span class=\"fu\">greet</span>(<span class=\"st\">&#39;#name&#39;</span>)\n<span class=\"co\">//=&gt; Maybe(&#39;hello chris&#39;)</span></code></pre><h3 id=\"mutiple-values-lifta2\">Mutiple Values (liftA2)</h3><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"fu\">liftA2</span>(f, <span class=\"fu\">A</span>(x), <span class=\"fu\">A</span>(y))\n\n<span class=\"fu\">liftA2</span>(add, <span class=\"fu\">Maybe</span>(<span class=\"dv\">3</span>), <span class=\"fu\">Maybe</span>(<span class=\"dv\">4</span>))\n<span class=\"co\">//=&gt; Maybe(7)</span>\n\n<span class=\"fu\">liftA2</span>(add, <span class=\"fu\">Maybe</span>(<span class=\"kw\">null</span>), <span class=\"fu\">Maybe</span>(<span class=\"dv\">4</span>))\n<span class=\"co\">//=&gt; Maybe(null)</span></code></pre><h3 id=\"examples\">Examples</h3><h4 id=\"lenses-1\">Lenses</h4><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> L = <span class=\"fu\">makeLenses</span>([<span class=\"st\">&#39;body&#39;</span>, <span class=\"st\">&#39;viewed&#39;</span>])\n<span class=\"kw\">var</span> comment = {<span class=\"dt\">id</span>:<span class=\"dv\">2</span>, <span class=\"dt\">body</span>: <span class=\"st\">&quot;this is a *great* post&quot;</span>, <span class=\"dt\">viewed</span>: <span class=\"kw\">false</span>}\n<span class=\"kw\">var</span> showOnScreen = log\n<span class=\"kw\">var</span> prog = <span class=\"fu\">compose</span>(showOnScreen, <span class=\"fu\">set</span>(<span class=\"ot\">L</span>.<span class=\"fu\">viewed</span>, <span class=\"kw\">true</span>), <span class=\"fu\">over</span>(<span class=\"ot\">L</span>.<span class=\"fu\">body</span>, markdown))\n<span class=\"fu\">prog</span>(comment)\n<span class=\"co\">//=&gt; {id:2, body: &#39;&lt;p&gt;this is a &lt;em&gt;great&lt;/em&gt; post!&lt;/p&gt;&#39;, viewed: true}</span></code></pre><h4 id=\"eithermaybe\">Either/Maybe</h4><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> getWords = <span class=\"fu\">compose</span>(<span class=\"fu\">Either</span>(<span class=\"st\">&#39;you need some words&#39;</span>)\n               , <span class=\"fu\">match</span>(<span class=\"ot\">/</span><span class=\"bn\">\\w</span><span class=\"fl\">+</span><span class=\"ot\">/g</span>))\n<span class=\"kw\">var</span> showCount = <span class=\"fu\">compose</span>(<span class=\"fu\">concat</span>(<span class=\"st\">&#39;The count is: &#39;</span>)\n                , <span class=\"fu\">pluck</span>(<span class=\"st\">&#39;length&#39;</span>))\n<span class=\"kw\">var</span> prog = <span class=\"fu\">compose</span>(<span class=\"fu\">fmap</span>(showCount), getWords)\n<span class=\"kw\">var</span> result = <span class=\"fu\">progr</span>(<span class=\"st\">&#39; blah &#39;</span>)\n<span class=\"fu\">log</span>(result)\n<span class=\"co\">//=&gt; Right(&#39;The count is: 1&#39;)</span></code></pre><p><strong>These notes came from the video below:</strong></p><p><a href=\"https://github.com/DrBoolean/patterns_talk\">The full slides are also available.</a></p><iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/AvgwKjTPMmM\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n"},{"title":"bilby.js & functional programming","tags":["bilby.js","functional programming"],"date":"May 13, 2014","url":"/2014/05/13/bilby_functional_programming/","contents":"<h1 id=\"bilby.js-functional-programming\">bilby.js &amp; functional programming</h1><p>I’ve been learning functional programming for quite some time and like the programming paradigm. But, it can be difficult sometimes. Some libraries like lodash.js can be easy to start learning, but others like bilby.js require that you understand more of the functional approach. So, here are some videos that have helped me understand bilby.js better.</p><hr /><p><strong>This one gives a quick overview. Note that Maybe (Haskell) is similar to Option (Scala)</strong></p><iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/AvgwKjTPMmM\" frameborder=\"0\" allowfullscreen></iframe>\n<p><strong>This video helped you learn about applicatitves, functors, etc.</strong></p><iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/ww2Z1URx-G0\" frameborder=\"0\" allowfullscreen></iframe>\n<p><strong>This helped me learn about design patterns used in the library bilby.js</strong></p><iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/Mw_Jnn_Y5iA\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n"},{"title":"Filler","tags":["misc","first post"],"date":"March 15, 2014","url":"/2014/04/15/filler/","contents":"<h1 id=\"filler\">Filler</h1><h3 id=\"filled\">Filled</h3><p><em>Already</em>.</p>\n"},{"title":"This is a Filler","subtitle":"Filling Up","type":"archive","url":"/","contents":"<p>Work with me while I figure this programming thing out.</p>\n"}]