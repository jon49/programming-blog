// Generated by LiveScript 1.2.0
var gulp, stylus, path, pandoc, manifest, del, concat, rename, wrapper, filter, replace, livescript, uglify, pandocSettings, postMetadata, posted;
gulp = require('gulp');
stylus = require('gulp-stylus');
path = require('path');
pandoc = require('gulp-pandoc');
manifest = require('gulp-asset-manifest');
del = require('del');
concat = require('gulp-concat');
rename = require('gulp-rename');
wrapper = require('gulp-wrapper');
filter = require('gulp-filter');
replace = require('gulp-regex-replace');
livescript = require('gulp-livescript');
uglify = require('gulp-uglify');
pandocSettings = {
  from: 'markdown',
  to: 'html',
  ext: '.html',
  args: ['--smart', '--template=/home/jon/Documents/Source/Repos/Websites/jon.prescottprogrammers.com/src/template.html', '--no-wrap']
};
postMetadata = {
  from: 'markdown',
  to: 'html',
  ext: '.json',
  args: ['--smart', '--template=/home/jon/Documents/Source/Repos/Websites/jon.prescottprogrammers.com/src/metadata.json', '--no-wrap']
};
posted = function(file){
  return /\d{4}/.test(file.path);
};
gulp.task('ls', function(){
  var devDest;
  devDest = './dev/js/';
  return gulp.src('./dev/ls/*.ls').pipe(concat('all_.ls')).pipe(livescript({
    bare: true
  }).on('error', function(e){
    throw e;
  })).pipe(gulp.dest(devDest));
});
gulp.task('js', ['ls'], function(){
  var devDest, distDest, result;
  devDest = './dev/js/';
  distDest = './dist/js/';
  result = gulp.src('./dev/js/*.js').pipe(concat('all.js')).pipe(wrapper({
    header: ';(function(){\n',
    footer: '\n})()'
  })).pipe(gulp.dest(devDest)).pipe(gulp.dest(distDest));
  return result;
});
gulp.task('clean', ['js'], function(){
  return del(['./dist/**', './dev/pages/*', './dev/posts/*'], function(){});
});
gulp.task('postMeta', ['js'], function(){
  var devDest, distDest;
  devDest = './dev/posts';
  distDest = './dist/posts';
  return gulp.src('./src/posts/*.md').pipe(filter(posted)).pipe(pandoc(postMetadata)).pipe(concat('metadata.json', {
    newLine: ','
  })).pipe(wrapper({
    header: '[',
    footer: ']'
  })).pipe(replace({
    regex: ',]',
    replace: ']'
  })).pipe(gulp.dest(devDest)).pipe(gulp.dest(distDest));
});
gulp.task('posts', ['postMeta'], function(){
  var devDest, distDest;
  devDest = './dev/posts';
  distDest = './dist/posts';
  return gulp.src('./src/posts/*.md').pipe(filter(posted)).pipe(pandoc(pandocSettings)).pipe(gulp.dest(devDest)).pipe(gulp.dest(distDest));
});
gulp.task('json', ['posts'], function(){
  return gulp.src('./dev/posts/*.html').pipe(manifest({
    bundleName: 'posts',
    manifestFile: 'posts.json'
  }));
});
gulp.task('moveJSON', ['json'], function(){
  var devDest, distDest;
  devDest = './dev/posts';
  distDest = './dist/posts';
  gulp.src(['*.json', '!package.json']).pipe(gulp.dest(devDest)).pipe(gulp.dest(distDest));
  return del(['*.json', '!package.json'], function(){});
});
gulp.task('pages', ['moveJSON'], function(){
  var devDest, distDest;
  devDest = './dev/pages';
  distDest = './dist/pages';
  return gulp.src('./src/pages/*.md').pipe(pandoc(pandocSettings)).pipe(gulp.dest(devDest)).pipe(gulp.dest(distDest));
});
gulp.task('css', ['js'], function(){
  var devDest, distDest;
  devDest = './dev/css';
  distDest = './dist/css';
  return gulp.src('./src/css/*.styl').pipe(stylus()).pipe(gulp.dest(devDest)).pipe(gulp.dest(distDest));
});
gulp.task('default', ['js', 'clean', 'postMeta', 'posts', 'json', 'moveJSON', 'pages', 'js', 'css']);