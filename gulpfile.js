// Generated by LiveScript 1.2.0
var gulp, path, del, lodash, browserify, pdc, λ, stylus, manifest, concat, rename, wrapper, filter, replace, livescript, uglify, frontMatter, ssg, es, pluck, data, source, pandoc, toHtml, toSimpleHtml, posted, toUrlPath, toUrlStylePath;
gulp = require('gulp');
path = require('path');
del = require('del');
lodash = require('lodash');
browserify = require('browserify');
pdc = require('pdc');
λ = lodash;
stylus = require('gulp-stylus');
manifest = require('gulp-asset-manifest');
concat = require('gulp-concat');
rename = require('gulp-rename');
wrapper = require('gulp-wrapper');
filter = require('gulp-filter');
replace = require('gulp-regex-replace');
livescript = require('gulp-livescript');
uglify = require('gulp-uglify');
frontMatter = require('gulp-front-matter');
ssg = require('gulp-ssg');
es = require('event-stream');
pluck = require('gulp-pluck');
data = require('gulp-data');
source = require('vinyl-source-stream');
pandoc = require('gulp-pandoc');
toHtml = {
  from: 'markdown',
  to: 'html',
  ext: '.html',
  args: ['--smart', '--template=/home/jon/Documents/Source/Repos/Websites/jon.prescottprogrammers.com/src/template.html', '--no-wrap']
};
toSimpleHtml = {
  from: 'markdown',
  to: 'html',
  ext: '.html',
  args: ['--smart', '--no-wrap']
};
posted = function(file){
  return /\d{4}/.test(file.path) || /pages/.test(file.path);
};
toUrlPath = function(fileName){
  var s, index, dir;
  s = fileName.toLowerCase();
  index = s.lastIndexOf('.');
  return dir = (function(){
    switch (false) {
    case fileName === 'index.html':
      return '/' + s.slice(0, index).replace(/-/g, '/') + '/';
    default:
      return '/';
    }
  }());
};
toUrlStylePath = function(file){
  var s, i, dir, fileName;
  s = file.basename.toLowerCase();
  i = s.lastIndexOf('-' === -1)
    ? s.length
    : s.lastIndexOf('-');
  dir = '/' + s.slice(0, i).replace(/-/g, '/');
  fileName = s.slice(i + 1);
  file.dirname = (function(){
    switch (false) {
    case s === 'index':
      return dir + "/" + fileName;
    default:
      return '';
    }
  }());
  file.basename = 'index';
  file.ext = '.html';
};
gulp.task('clean', function(){
  return del(['./dist/**', './dev/**', './src/ls/*.js'], function(){});
});
gulp.task('images', ['clean'], function(){
  var distDest;
  distDest = './dist/images';
  return gulp.src('./src/images/**').pipe(gulp.dest(distDest));
});
gulp.task('js', ['images'], function(){
  var distDest;
  distDest = './dist/js';
  return browserify({
    entries: ['./src/ls/app.ls'],
    extensions: ['.ls']
  }).bundle().pipe(source('app.js')).pipe(gulp.dest(distDest));
});
gulp.task('html', ['js'], function(){
  var distDest;
  distDest = './dist';
  return gulp.src('./src/**/*.md').pipe(filter(posted)).pipe(pandoc(toHtml)).pipe(rename(toUrlStylePath)).pipe(gulp.dest(distDest));
});
gulp.task('json', ['html'], function(){
  var distDest;
  distDest = './dist';
  return gulp.src('./src/**/*.md').pipe(filter(posted)).pipe(frontMatter({
    property: 'meta'
  })).pipe(pandoc(toSimpleHtml)).pipe(data(function(file){
    file.meta.url = toUrlPath(path.basename(file.relative));
    file.meta.contents = file.contents.toString();
  })).pipe(pluck('meta', 'data.json')).pipe(data(function(file){
    var meta;
    meta = λ.sortBy(file.meta, 'url').reverse();
    file.contents = new Buffer(JSON.stringify(meta));
  })).pipe(gulp.dest(distDest));
});
gulp.task('css', ['js'], function(){
  var distDest;
  distDest = './dist/css';
  return gulp.src('./src/css/*.styl').pipe(stylus()).pipe(gulp.dest(distDest));
});
gulp.task('default', ['clean', 'images', 'js', 'html', 'json', 'js', 'css']);