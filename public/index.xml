<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hamsters Byte</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Hamsters Byte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s about the code, chè!.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Media Object</title>
      <link>http://localhost:1313/2014/12/30/css_media_object/</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/12/30/css_media_object/</guid>
      <description>&lt;p&gt;I just finished attending the RockIt Bootcamp (12 week program). It&amp;rsquo;s a program that teaches the LAMP full stack development (Linux, Apache, mySQL, PHP). In the next little while I will be going over some of the things which I learned.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;css media object&lt;/em&gt; was first coined by &lt;a href=&#34;http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/&#34;&gt;Nicole Sullivan&lt;/a&gt; in 2010. It is still one of the most basic constructs to learn and understand in created good CSS content.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;media object&lt;/em&gt; is basically a box with two other boxes side by side in the main box. Typically the box to the left is a picture and the box to the right is content, but can be anything.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;media&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/images/my-cool-mug.png&amp;quot; alt=&amp;quot;A pic of me&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;Some written content in the media object.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;Look, another paragraph in the media object!&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;media object&lt;/em&gt; css gives padding and margins to the objects that make them look nice and make the picture fit correctly. It also does a clearfix so the outside box doesn&amp;rsquo;t collapse to a smaller area than its content.&lt;/p&gt;

&lt;p&gt;Some of the code I made specifically for this example, but in practice you would not put everything in the &lt;code&gt;media&lt;/code&gt; class. E.g., the &lt;code&gt;width&lt;/code&gt; of the media element would be decided somewhere else, make the &lt;code&gt;media&lt;/code&gt; class more reusable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Give the media object a shape. Add */
/* padding just to make it look nice. */
.media {
  padding: 10px;
  width: 300px;
}
/* clearfix */
.media::after {
  content: &#39;&#39;;
  display: block;
  clear: both;
}
.media &amp;gt; * {
  padding: 0;
  margin: 0;
}
.media &amp;gt; *:first-child {
  float: left;
}
/* Make all content be past the picture. */
.media &amp;gt; *:last-child {
  margin-left: 110px;
}
/* The following is just to make */
/* the paragraphs look nice. */
.media &amp;gt; *:last-child &amp;gt; * {
  margin: 0 0 10px 0;
}
.media &amp;gt; *:last-child &amp;gt; *:last-child {
  margin-bottom: 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Site Ending</title>
      <link>http://localhost:1313/2014/10/28/html/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/10/28/html/</guid>
      <description>&lt;p&gt;This site will be going the way of the ether come next week. You can
still see the posts over
at &lt;a href=&#34;http://spreadsheetbudget.com.s3-website-us-east-1.amazonaws.com/blog/&#34;&gt;http://spreadsheetbudget.com.s3-website-us-east-1.amazonaws.com/blog/&lt;/a&gt;.
It’s been great. Check out my web development blog over
at &lt;a href=&#34;http://jon.prescottprogrammers.com/&#34;&gt;http://jon.prescottprogrammers.com/&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular.js vs React.js vs Mithril.js</title>
      <link>http://localhost:1313/2014/10/03/angular_vs_react_mithril/</link>
      <pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/10/03/angular_vs_react_mithril/</guid>
      <description>&lt;p&gt;Apparently Facebook has a bunch of functional-style programmers, not writing in ClosureScript though! &lt;a href=&#34;https://www.youtube.com/watch?v=IVvHPPcl2TM&#34;&gt;https://www.youtube.com/watch?v=IVvHPPcl2TM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://youtu.be/nYkdrAPrdcw?t=40m30s&#34;&gt;http://youtu.be/nYkdrAPrdcw?t=40m30s&lt;/a&gt;
&amp;gt; [Starts at 40 minute 30 seconds. Person asks question then Jing Chen
&amp;gt; laughs at question, she must know how much Pete doesn&amp;rsquo;t like Angular.]
&amp;gt; So, the question was comparing and contrasting&amp;hellip;React plus Flux and
&amp;gt; Angular. &amp;hellip;[T]hey do solve some of the same
&amp;gt; problems but they go at it in very different ways. So React is focused a
&amp;gt; lot on treating your code as a black box. So, there&amp;rsquo;s no sort of
&amp;gt; observable abstraction inside of react you simply say, &amp;ldquo;Hey, rerender
&amp;gt; the UI and you present a consistent view of what you want your UI to
&amp;gt; look like.&amp;rdquo; With Angular you are basically passing data throughout these
&amp;gt; things called scopes which observe your data model and I think&amp;hellip;
&amp;gt; that&amp;rsquo;s a very leaky abstraction. It forces you to compose your
&amp;gt; application not in terms of functions and objects but in terms of
&amp;gt; directives and model-view-controller and their flavor of
&amp;gt; model-view-controller. So, while it does work for a certain class of
&amp;gt; applications as you scale up you start to miss the past 40 or 50 years
&amp;gt; of research and how to abstract a program. So if you&amp;hellip;
&amp;gt; push that kind of data binding concern out to the edges of your
&amp;gt; system like React does I think it leads to faster iteration time.\
&amp;gt; &amp;ndash; &lt;em&gt;Pete
&amp;gt; Hunt - Engineering Manager, Rethinking Web App Development at Facebook,
&amp;gt; Facebook&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Leo Horie (creator of Mithril on Flux/React)
&lt;a href=&#34;https://news.ycombinator.com/item?id=7720559&#34;&gt;https://news.ycombinator.com/item?id=7720559&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I really like this architecture - it&amp;rsquo;s clearly based on lessons learned
from the same types of pains that I myself encountered w/ non-trivial
jQuery, and the unidirectional data flow makes it a lot easier to reason
about the code. It&amp;rsquo;s very similar to what I&amp;rsquo;m doing with my own micro
mvc framework Mithril ( &lt;a href=&#34;http://lhorie.github.io/mithril&#34;&gt;http://lhorie.github.io/mithril&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;One thing that raise my eyebrows about this article though is how says
that Flux eschews MVC, and then goes on to say that it has stores that
are &amp;ldquo;somewhat similar to a model&amp;rdquo;, and &amp;ldquo;the dispatcher exposes a method
that allows a view to trigger a dispatch to the stores&amp;rdquo;, which, as far
as classic MVC goes, is the exact definition of a controller. What they
call controller-view is, imho, just an implementation detail within the
view layer: in classic MVC, views were responsible for subscribing to
model observables, or, as the article puts it, it &amp;ldquo;listens for events
that are broadcast by the stores that it depends on&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;When talking about this architecture with the Mithril community, I find
that referring back to the MVC pattern makes it even easier to reason
about the flow of data: it&amp;rsquo;s basically M -&amp;gt; V -&amp;gt; C -&amp;gt; M &amp;hellip;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s unfortunate that the general understanding of the MVC pattern
became misunderstood over the course of many frameworks. The whole point
of design patterns should be that we could just name them for people to
&amp;ldquo;get&amp;rdquo; it, rather than having to reinvent new ways of naming things and
having everyone relearn the nomenclature.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>bilby.js &amp; lenses</title>
      <link>http://localhost:1313/2014/07/01/bilbyjs_lenses/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/07/01/bilbyjs_lenses/</guid>
      <description>&lt;p&gt;In JavaScript nearly everything is &lt;a href=&#34;http://en.wikipedia.org/wiki/Mutable&#34;&gt;mutable&lt;/a&gt;. This can cause problems
in your code when you think you have a new object or variable but
instead you are operating on the referenced object. So, we create
patterns to alleviate this problem. Or we use libraries like
&lt;a href=&#34;http://underscorejs.org/&#34;&gt;underscore.js&lt;/a&gt; or &lt;a href=&#34;http://lodash.com/docs&#34;&gt;lodash.js&lt;/a&gt; which incorporate the functional
concepts. Unfortunately they don&amp;rsquo;t always use immutable objects either.&lt;/p&gt;

&lt;p&gt;Bilby.js solves the mutability problem by using &lt;a href=&#34;http://bilby.brianmckenna.org/#lenses&#34;&gt;lenses&lt;/a&gt;. Using the
&lt;a href=&#34;http://en.wikipedia.org/wiki/Bidirectional_transformation&#34;&gt;lenses&lt;/a&gt; pattern one can access and change one&amp;rsquo;s objects in a safe
and immutable manner.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we have the &lt;code&gt;Person&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Person(){
   this.name = {first: &#39;George&#39;, last: &#39;Stanza&#39;}
   this.id = 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use bilby.js lenses by first creating lens objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var nameLens = bilby.objectLens(&#39;name&#39;)
var firstLens = bilby.objectLens(&#39;first&#39;)
var lastLens = bilby.objectLens(&#39;last&#39;)
var idLens = bilby.objectLens(&#39;id&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then can use getters to access the data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var george = new Person()
// Person {name: {first:&#39;George&#39;, last: &#39;Stanza&#39;}, id: 0}
firstLens.compose(nameLens).run(george).getter
//George
lastLens.compose(nameLens).run(george).getter
//Stanza
idLens.run(george).getter
//0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can create a get function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var get = function(lens, obj){
   return lens.run(obj).getter
}
// e.g.,
get(firstLens.compose(nameLens), george)
// George
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a new object with new values from another object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var susan = firstLens.compose(nameLens).run(george).setter(&#39;Susan&#39;)
// Object {name: {first:&#39;Susan&#39;, last: &#39;Stanza&#39;}, id: 0}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The below code is strongly discouraged by &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf&#34;&gt;Mozilla Developer Network&lt;/a&gt;.
Also, the correct method would be &lt;code&gt;Object.getPrototypeOf(object)&lt;/code&gt; and
&lt;code&gt;Object.setPrototypeOf(object)&lt;/code&gt; instead of &lt;code&gt;__proto__&lt;/code&gt;. I&amp;rsquo;ve since
switched to using plain objects with commonjs modules instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;End Update&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hhhhmmm&amp;hellip;there&amp;rsquo;s a problem there. &lt;code&gt;susan&lt;/code&gt; is no longer a &lt;code&gt;Person&lt;/code&gt; she&amp;rsquo;s
only an &lt;code&gt;Object&lt;/code&gt;. We don&amp;rsquo;t want to objectify her do we? I worked around
this problem by creating my own &lt;code&gt;set&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var set = function(lens, object, value){
   var newObject = lens.run(object).setter(value)
   return _.isEqual(newObject.__proto__, object.__proto__) 
      ? newObject 
      : (newObject.__proto__ = object.__proto__, newObject)
}
//e.g.,
var fred = set(firstLens.compose(nameLens), george, &#39;Fred&#39;)
// Person {name: {first:&#39;Fred&#39;, last: &#39;Stanza&#39;}, id: 0}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to remember that these new objects are not deep clones, only
shallow clones, which helps with performance but, if we leave our design
pattern we could get in trouble, so be careful!&lt;/p&gt;

&lt;p&gt;Note that in &lt;a href=&#34;https://github.com/fantasyland/fantasy-lenses&#34;&gt;Fantasy Land lenses&lt;/a&gt; the naming convetion is different
&lt;code&gt;setter&lt;/code&gt; and &lt;code&gt;getter&lt;/code&gt; drop the &lt;code&gt;ter&lt;/code&gt; and &lt;code&gt;compose&lt;/code&gt; is dropped in favor
of &lt;code&gt;andThen&lt;/code&gt; making it so you can switch the order of your lenses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var deborah = nameLens.andThen(firstLens).run(george).set(&#39;Deborah&#39;)
// Object {name: {first: &#39;Deborah&#39;, last: &#39;Stanza&#39;}, id: 0}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to play around with these concepts in jsFiddle you can use lodash.js&amp;rsquo; &lt;code&gt;_.assign&lt;/code&gt; method. I&amp;rsquo;ve set up the &lt;a href=&#34;http://jsfiddle.net/jon49/3xRNT/&#34;&gt;jsFiddle here.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Match Expression for JavaScript?</title>
      <link>http://localhost:1313/2014/06/20/match_expression_javascript/</link>
      <pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/06/20/match_expression_javascript/</guid>
      <description>&lt;p&gt;Sometimes (or rather most of the time) it would be nice to have more concise code in JavaScript. I was working with a function that needed quite a bit of &lt;code&gt;if&lt;/code&gt; statements. &lt;code&gt;if&lt;/code&gt; was awfully cluttered. I had looked at &lt;a href=&#34;http://bilby.brianmckenna.org/examples/validation.htm&#34;&gt;bilby.js examples&lt;/a&gt; and hadn&amp;rsquo;t realized that you can do multiple &lt;code&gt;ternary expressions&lt;/code&gt; in a row.&lt;/p&gt;

&lt;p&gt;So, instead of,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (0){
  return 0
}
else if (1){
   if (2) {
     return 1
   }
   else if (3) {
     return 2
   }
   else {
     return 3
   }
}
else {
  return 4
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can do,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(0) ? 0
: (1) ?
     (2) ? 1
   : (3) ? 2
   : 3
: 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is much more concise and readable.&lt;/p&gt;

&lt;p&gt;So where does &lt;code&gt;match expressions&lt;/code&gt; come into play? Glad you asked.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ternary&lt;/code&gt; example above gives a similar &lt;a href=&#34;http://fsharpforfunandprofit.com/posts/match-expression/&#34;&gt;feel to &lt;code&gt;F#&lt;/code&gt;&amp;rsquo;s &lt;code&gt;match expressions&lt;/code&gt;&lt;/a&gt;. So, as an example here&amp;rsquo;s what a similary structured &lt;code&gt;match expression&lt;/code&gt; would look like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;match [something] with 
| pattern0 -&amp;gt; 0
| pattern1 -&amp;gt; 
   match [something else] with
   | pattern2 -&amp;gt; 1
   | pattern3 -&amp;gt; 2
   | _ -&amp;gt; 3
| _ -&amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, with &lt;code&gt;F#&lt;/code&gt; you could probably get away  without doing the second &lt;code&gt;match&lt;/code&gt; by using a &lt;code&gt;Tuple&lt;/code&gt; but that is beyond the scope of this post.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s look at the real function I made. First, let&amp;rsquo;s set up the bare parts of the function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var addRollingArray = function (array, start, end, fraction) {
  var floor = Math.floor
  // Put code below here.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we&amp;rsquo;ll map the array with some helper logic values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  return _.map(array, function (value, index) {
    var isIndexStart = (floor(start) === index),
        isIndexBetween = (floor(start) &amp;lt;= index &amp;amp;&amp;amp; index &amp;lt;= floor(end)),
        isIndexEnd = (floor(end) === index)
    // Code below goes here.
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;if&lt;/code&gt; code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (isIndexBetween) {
  if (isIndexStart &amp;amp;&amp;amp; isIndexEnd)
    return fraction * (end - start) + value
  else if (isIndexStart)
    return fraction * (1 + index - start) + value
  else if (isIndexEnd)
    return fraction * (end - index) + value
  else
    // Index is fully between start and end values
    return fraction + value
}
// Index is out of bounds return original value
return value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&amp;rsquo;s the refactored code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;return   
  isIndexBetween ? 
      isIndexStart &amp;amp;&amp;amp; isIndexEnd ? fraction * (end - start) + value
    : isIndexStart ? fraction * (1 + index - start) + value
    : isIndexEnd   ? fraction * (end - index) + value
    // Index is fully between start and end values
    : fraction + value
  // Index is out of bounds return original value
  : value
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A Distributed &amp; Robust Feedly</title>
      <link>http://localhost:1313/2014/06/12/distributed_robust_feedly/</link>
      <pubDate>Thu, 12 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/06/12/distributed_robust_feedly/</guid>
      <description>&lt;p&gt;In light of the recent attack on &lt;a href=&#34;http://feedly.com/&#34;&gt;Feedly.com&lt;/a&gt; I thought it might be interesting to see other ways we could propogate data accross the Interent without being succeptible to attacks, or, at least less accessible.&lt;/p&gt;

&lt;p&gt;With the approach outlined below we need to use an actual app instead of being able to use a browser (there might be a way to use a browser also, not sure how it would work though).&lt;/p&gt;

&lt;p&gt;I used BitTorrent Sync as the distribution model. The more people that follow a blog the more robust its feed will become.&lt;/p&gt;

&lt;p&gt;On the back end all feedly would need to do is periodically update the feeds and user data - but the user data will only need to be updated if a user changes their password. If they have a read-write key for their data then it can be updated only locally and then propogated. The more devices a user uses the more robust their data will become.&lt;/p&gt;

&lt;p&gt;It will be nice when the internet will catch up with the distributed model of doing things.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/images/FeedlyApp.png&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/small/FeedlyApp.png&#34; alt=&#34;A Simple Outline of How to Set Up a Distributed Feedly&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Simple Outline of How to Set Up a Distributed Feedly&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prototypes &amp; Compositions with Objects</title>
      <link>http://localhost:1313/2014/06/04/prototypes_composition_with_objects/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/06/04/prototypes_composition_with_objects/</guid>
      <description>&lt;p&gt;I was trying to figure out the best way to have functions be both compatible with an object oriented paradigm and a functional oriented paradigm when working on objects. My implementations are probably naive, but instructive nevertheless. It seems that &lt;a href=&#34;http://lodash.com/&#34;&gt;lo-dash&lt;/a&gt; and other libraries have done a good job bridging those worlds.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you have an object &lt;code&gt;O&lt;/code&gt; such that&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function O(a, b){
  this.a = a
  this.b = b
}

var o = function(a, b){
  return new O(a, b)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you want to &lt;code&gt;extend&lt;/code&gt; the object but you also want the option to use the object in a more fuctional way with &lt;code&gt;compose&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with a simple &lt;code&gt;display&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var display = function(thisArg){
  var o_ = thisArg || this
  console.log(o_)
  return o_
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then a method to change a property.*&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var change = function(property){
  return function(value, thisArg){
  	var o_ = _.cloneDeep(thisArg || this)
    o_[property] = value
    return o_
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can set property to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var changeA = change(&#39;a&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can add &lt;code&gt;changeA&lt;/code&gt; to the &lt;code&gt;O&lt;/code&gt; object and use it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;O.prototype.changeA = changeA
var o_ = o(1, 2)
o_.changeA(3).display()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we can use a functional approach.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var o_ = o(1, 2)
_.compose(display, _.curry(changeA)(3))(o_)
//OR
_.compose(display, _.partialRight(changeA, o_))(3)
//OR
_.compose(display, changeA)(3, o_)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think I like the functional approach for the more abstract functions and the OO approach as your code becomes more specific. The functional evangelists say the functional style is better because it leads to more reusable code. Which I would agree with, since you are not tying your code up with an object you can then easily extend your model to various other objects, without the use of &lt;code&gt;inheritance&lt;/code&gt; and other OO monsters. I think I will use a hybrid approach with &lt;code&gt;bilby.js&lt;/code&gt; library which uses polymorphism.&lt;/p&gt;

&lt;p&gt;By the way, what I just did with &lt;code&gt;change&lt;/code&gt; is similar to &lt;a href=&#34;https://github.com/fantasyland/fantasy-lenses&#34;&gt;&lt;code&gt;lenses&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;* An alternative to this would be using a partial function, which would make the original function more flexible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var change = function(property, value, thisArg){
  	var o_ = _.cloneDeep(thisArg || this)
    o_[property] = value
    return o_
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can set property to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var changeA = _.partial(change, &#39;a&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or using combinators (not strict).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var set = function(property, value){
  this[property] = value
  return this
}

var change = function(f, value, thisArg){
  	var o_ = _.cloneDeep(thisArg || this)
    o_ = f.apply(o_, [value])
    return o_
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can set property to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var changeA = _.partial(change
              , _.partial(set, &#39;a&#39;))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Functional Immutability in JavaScript</title>
      <link>http://localhost:1313/2014/05/29/functional_immutability_in_javascript/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/05/29/functional_immutability_in_javascript/</guid>
      <description>&lt;p&gt;This is taken from Michael Fogus&amp;rsquo; book &lt;em&gt;Functional JavaScript&lt;/em&gt; in the chapter &lt;em&gt;Purity, Immutability, and Policies for Change&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Immutability is impossible to achieve in JavaScript without using &lt;code&gt;Object.freeze&lt;/code&gt; but it only performs makes the object immutable shallowing, you have to roll your own &lt;code&gt;deepFreeze&lt;/code&gt; if you would like to make the object truly immutable.&lt;/p&gt;

&lt;p&gt;So there are some practices you can do to make your functions and variables perform in a more immutable manner.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var SaferQueue = function(elems) {
  this._q = _.clone(elems);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to you can use a &lt;code&gt;deepClone&lt;/code&gt; instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;SaferQueue.prototype = {
  enqueue: function(thing) {
    return new SaferQueue(cat(this._q, [thing]));
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;cat&lt;/code&gt; concatenates two arrays without changing the values of the original arrays.&lt;/p&gt;

&lt;p&gt;And don&amp;rsquo;t forget to encapsulate the &lt;code&gt;object&lt;/code&gt; instatiation behind a function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functional or Object Oriented JavaScript?</title>
      <link>http://localhost:1313/2014/05/29/functional_or_oo_javascript/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/05/29/functional_or_oo_javascript/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;When people are first exposed to JavaScript and its minimal set of tools (functions, objects, prototypes, and arrays), many are underwhelmed. Therefore, in order to “modify” JavaScript to conform to their idea of what it takes to model software solutions, they very often seek out or re-create class-based systems using the primordial ooze.&lt;/p&gt;

&lt;p&gt;- Michael Fogus &lt;em&gt;Functional Programming&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, the next sentence he softens that quote, I just enjoyed the first part though.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This desire is completely understandable given that in general people will often seek the familiar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the big problem is&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The big problem with class hierarchies is that they are created under the assumption that we know the set of needed behaviors from the start. That is, object-oriented techniques prescribe that we start with a hierarchy of behaviors and fit our classes into that determination.&lt;/p&gt;

&lt;p&gt;- Michael Fogus &lt;em&gt;Functional Programming&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Monads, Monoids, and Make Believe</title>
      <link>http://localhost:1313/2014/05/15/monads_monoids_and_make_believe_brian_lonsdorf/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/05/15/monads_monoids_and_make_believe_brian_lonsdorf/</guid>
      <description>

&lt;h2 id=&#34;with-brian-lonsdorf:0ca8684476f81d878f3c655714614cce&#34;&gt;with Brian Lonsdorf&lt;/h2&gt;

&lt;h3 id=&#34;working-with-objects:0ca8684476f81d878f3c655714614cce&#34;&gt;Working with Objects&lt;/h3&gt;

&lt;h4 id=&#34;the-better-way:0ca8684476f81d878f3c655714614cce&#34;&gt;the better way&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var SSN = Constructor(function(number, current_user){
	this.number = number
    this.user = current_user
})

SSN.prototype = {
	fmap: function(f){
    	if(this.user.is_admin)
        	return SSN(f(this.number), this.user)
    }
}

social.fmap(replace(&#39;-&#39;, &#39;&#39;))
//=&amp;gt; SSN(&#39;123456789&#39;, user)

social.fmap(function(number){return number.reverse()})
//=&amp;gt; SSN(&#39;1234-56-789&#39;, user)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-functor-way:0ca8684476f81d878f3c655714614cce&#34;&gt;the functor way&lt;/h4&gt;

&lt;p&gt;Note: &lt;a href=&#34;https://github.com/DrBoolean/Functor/blob/master/functor.js&#34;&gt;Functor function defined.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var AdminAccess = Constructor(function(val, current_user){
	this.val = val
    this.user = current_user
})

Functor(AdminAccess, {
	fmap: function(f){
    	if(this.user.is_admin)
        	return AdminAccess(f(this.val), this.user)
    }
})

var social = AdminAccess(&#39;1234-56-789&#39;, current_user)
fmap(removeDashes, social)
//=&amp;gt; AdminAccess(&#39;123456789&#39;, current_user)
fmap(validNumber, social)
//=&amp;gt; AdminAccess(true, current_user)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He then goes into other useful patterns with monads. But I&amp;rsquo;ll revisit that later after I get a better handle on this!&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/ww2Z1URx-G0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>bilby.js &amp; functional programming</title>
      <link>http://localhost:1313/2014/05/13/bilby_functional_programming/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/05/13/bilby_functional_programming/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been learning functional programming for quite some time and like the programming paradigm. But, it can be difficult sometimes. Some libraries like lodash.js can be easy to start learning, but others like bilby.js require that you understand more of the functional approach. So, here are some videos that have helped me understand bilby.js better.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;This one gives a quick overview. Note that Maybe (Haskell) is similar to Option (Scala)&lt;/strong&gt;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/AvgwKjTPMmM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;This video helped you learn about applicatitves, functors, etc.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/ww2Z1URx-G0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;This helped me learn about design patterns used in the library bilby.js&lt;/strong&gt;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/Mw_Jnn_Y5iA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Notes On Functional Programming</title>
      <link>http://localhost:1313/2014/05/13/functional_programming_for_non_mathematicians/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/05/13/functional_programming_for_non_mathematicians/</guid>
      <description>

&lt;h2 id=&#34;patterns-for-the-non-mathematician-with-brian-lonsdorf:84395a4544571503aa2619881045cc3a&#34;&gt;Patterns for the Non-Mathematician with Brian Lonsdorf&lt;/h2&gt;

&lt;h3 id=&#34;lenses:84395a4544571503aa2619881045cc3a&#34;&gt;Lenses&lt;/h3&gt;

&lt;p&gt;Using lenses for composable/polymorphic model manipulation.&lt;/p&gt;

&lt;p&gt;E.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var user = {id:1, name:{first:&#39;doris&#39;, last:&#39;day&#39;}}
var L = makeLenses([&#39;name&#39;, &#39;first&#39;])
var firstNameChar = compose(L.name, L.first, _1)
over(firstNameChar, toUpperCase, user)
//=&amp;gt; {id:1, name:{first:&#39;Doris&#39;, last:&#39;day&#39;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;maybe:84395a4544571503aa2619881045cc3a&#34;&gt;Maybe&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;Maybe&lt;/code&gt; (Haskell) types (&lt;code&gt;Option&lt;/code&gt; types in bilby.js / Scala style) to make composition easier. This works with &lt;code&gt;fmap&lt;/code&gt; (functor maps). Returns resultant &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;error-handling-either:84395a4544571503aa2619881045cc3a&#34;&gt;Error Handling (Either)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Either(&#39;need an int&#39;, 3)
//=&amp;gt; Right(3)

Either(&#39;need an int&#39;, undefined)
//=&amp;gt; Left(&#39;need an int&#39;)

fmap(function(x){return x+1;}, Right(2))
//=&amp;gt; Right(3)

fmap(function(x){return x+1;}, Left(&#39;need an int&#39;))
//=&amp;gt; Left(&#39;need an int&#39;)

compose(fmap(f), Either(error))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;future-values:84395a4544571503aa2619881045cc3a&#34;&gt;Future Values&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ll have to come back to this one later when I use it more.&lt;/p&gt;

&lt;h3 id=&#34;functor:84395a4544571503aa2619881045cc3a&#34;&gt;Functor&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Something that implements &lt;strong&gt;map&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like Promise, Maybe, Either, etc.&lt;/p&gt;

&lt;h3 id=&#34;nesting:84395a4544571503aa2619881045cc3a&#34;&gt;Nesting&lt;/h3&gt;

&lt;p&gt;Use mjoin (flatMap &amp;ndash; bilby.js) to flatten nesting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var getField = compose(Maybe, document.querySelector)
var getValue = compose(Maybe, pluck(&#39;value&#39;))

var greet = compose(fmap(fmap(concat(&#39;hello&#39;)))
                    , fmap(getValue), getField)
greet(&#39;#name&#39;)
//=&amp;gt; Maybe(Maybe(&#39;hello chris&#39;))

var greet = compose(fmap(concat(&#39;hello&#39;))
                    , mjoin
                    , fmap(getValue), getField)
greet(&#39;#name&#39;)
//=&amp;gt; Maybe(&#39;hello chris&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mutiple-values-lifta2:84395a4544571503aa2619881045cc3a&#34;&gt;Mutiple Values (liftA2)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;liftA2(f, A(x), A(y))

liftA2(add, Maybe(3), Maybe(4))
//=&amp;gt; Maybe(7)

liftA2(add, Maybe(null), Maybe(4))
//=&amp;gt; Maybe(null)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;examples:84395a4544571503aa2619881045cc3a&#34;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&#34;lenses-1:84395a4544571503aa2619881045cc3a&#34;&gt;Lenses&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var L = makeLenses([&#39;body&#39;, &#39;viewed&#39;])
var comment = {id:2, body: &amp;quot;this is a *great* post&amp;quot;, viewed: false}
var showOnScreen = log
var prog = compose(showOnScreen, set(L.viewed, true), over(L.body, markdown))
prog(comment)
//=&amp;gt; {id:2, body: &#39;&amp;lt;p&amp;gt;this is a &amp;lt;em&amp;gt;great&amp;lt;/em&amp;gt; post!&amp;lt;/p&amp;gt;&#39;, viewed: true}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;either-maybe:84395a4544571503aa2619881045cc3a&#34;&gt;Either/Maybe&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var getWords = compose(Either(&#39;you need some words&#39;)
               , match(/\w+/g))
var showCount = compose(concat(&#39;The count is: &#39;)
                , pluck(&#39;length&#39;))
var prog = compose(fmap(showCount), getWords)
var result = progr(&#39; blah &#39;)
log(result)
//=&amp;gt; Right(&#39;The count is: 1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;These notes came from the video below:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/DrBoolean/patterns_talk&#34;&gt;The full slides are also available.&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/AvgwKjTPMmM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Filler</title>
      <link>http://localhost:1313/2014/04/15/filler/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2014/04/15/filler/</guid>
      <description>

&lt;h3 id=&#34;filled:d2871fa57ae2d72b9a7571c6b7ddfa15&#34;&gt;Filled&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Already&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spreadsheet Budget Launched</title>
      <link>http://localhost:1313/2013/10/28/spreadsheet_budget_launched/</link>
      <pubDate>Mon, 28 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2013/10/28/spreadsheet_budget_launched/</guid>
      <description>&lt;p&gt;This first version is pretty basic - yet powerful. It will import your financial data from &lt;a href=&#34;http://kmymoney2.sourceforge.net/index-home.html&#34;&gt;KMyMoney&lt;/a&gt; (I&amp;rsquo;ll add more financial programs later). Soon I will add report templates so you can easily view your finances - how you like it. It comes with an auto updater (&lt;a href=&#34;wyday.com/wyupdate/‎&#34;&gt;wyUpdate&lt;/a&gt;) so you can stay up to date with the latest version with small packages.&lt;/p&gt;

&lt;p&gt;Let me know what financial program you use so I can add it to the list for future compatibility.
&lt;div align=&#34;center&#34;&gt;[wpdm_file id=6]&lt;/div&gt;
&lt;strong&gt;How to install the add-in.&lt;/strong&gt;
&lt;div align=&#34;center&#34;&gt;&lt;iframe src=&#34;//www.youtube.com/embed/hJbNhsCR-Qk&#34; height=&#34;315&#34; width=&#34;420&#34; allowfullscreen=&#34;&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;strong&gt;How to get started with the add-in.&lt;/strong&gt;
&lt;div align=&#34;center&#34;&gt;&lt;iframe src=&#34;//www.youtube.com/embed/OQFAi5MKwxk&#34; height=&#34;315&#34; width=&#34;420&#34; allowfullscreen=&#34;&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;table align=&#34;center&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[singlepic id=8 w=100 h=100]&lt;/td&gt;
&lt;td&gt;[singlepic id=9 w=100 h=100]&lt;/td&gt;
&lt;td&gt;[singlepic id=10 w=100 h=100]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>